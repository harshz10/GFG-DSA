//C++
M-1
class Solution
{
    public:
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        // code here
        // just remove the loop without losing any nodes
        
        //Detect the loop
        Node *slow= head, *fast = head;
        
        while(fast&&fast->next)
        {
            slow= slow->next;
            fast = fast->next->next;
            
            if(slow==fast)
            break;
            
        };
        
        if(fast==NULL || fast->next==NULL)
        return;
        
        slow = head;
        //Meet karao
        while(slow!=fast)
        {
            slow = slow->next;
            fast = fast->next;
        };
        
        //slow last node pe 
        while(slow->next!=fast)
        {
            slow = slow->next;
        };
        
        slow->next=NULL;
        
    }
};


M-2

class Solution
{
    public:
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        // code here
        
        //just deletect the loop
        Node *slow = head, *fast = head;
        
        while(fast&&fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
            
            if(slow==fast)
            break;
        }
        
        //
        if(!fast||!fast->next)
        return;
        
        //Find the length of the loop 
        
        slow = fast->next;
        int count = 1;
        
        while(slow!=fast)
        {
            count++;
            slow = slow->next;
            
        }
        //loop ke andar kitne nodes hai;
        
        slow = head, fast =head;
        
        //first ko kinte distace door rkhna hai count andar store
        while(count--)
        {
            fast = fast->next;
        };
        
        while(slow!=fast)
        {
            slow = slow->next;
            fast = fast->next;
        };
        
        // Bring slow to last node
        
        while(slow->next!=fast)
        slow= slow->next;
        slow->next = NULL;
        
        
        
    }
};
