//C++
//****
class Solution
{
    public:
    //Function to find maximum of minimums of every window size.
    vector <int> maxOfMin(int arr[], int n)
    {
        // Your code here
        vector<int>ans(n,0);
        stack<int>st;
        
        for(int i=0;i<n;i++)
        {   // value kab tak pop hgi
            //NSR NSL
        while(!st.empty() &&arr[st.top()]>arr[i])
        {
           int index = st.top();
           st.pop();
          // i = next smallest Right
          // Stack ke andar jo index< NSL
          if(st.empty())
          {    //window size bata rha hai
              int range = i;
              ans[range-1] = max(ans[range-1],arr[index]);
          }
          else
          {
              int range  = i-st.top()-1;  //maximum window size
              ans[range-1] = max(ans[range-1],arr[index]);
          }
        }
        
        st.push(i);
      }
      
      //Stack element ko khali karo
      while(!st.empty())
      {
           int index = st.top();
           st.pop();
          // i = next smallest Right
          // Stack ke andar jo index< NSL
          if(st.empty())
          {    //window size bata rha hai
               //NSR-NSL-1
              int range = n;
              ans[range-1] = max(ans[range-1],arr[index]);
          }
          else
          {
              int range  = n-st.top()-1;  //maximum window size
              ans[range-1] = max(ans[range-1],arr[index]);
          }
      }
   
      //Ans array ki value ko update kar do
      for(int i=n-2;i>=0;i--)
      ans[i] = max(ans[i],ans[i+1]);
      
      return ans;
      
    }
};
