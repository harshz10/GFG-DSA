//c++
//good question
class Solution {
public:


    void ArrayBST(vector<int>arr, int start, int end, vector<int>&ans)
    {
        if(start>end)
        return;
        
        int mid = start+(end-start)/2;
        ans.push_back(arr[mid]);
        //left
        ArrayBST(arr,start,mid-1,ans);
        //right
        ArrayBST(arr,mid+1,end,ans);
        
    }

    vector<int> sortedArrayToBST(vector<int>& nums) {
        // Code here
        vector<int>ans;
        ArrayBST(nums,0,nums.size()-1,ans);
        return ans;
    }
};

//M-2(by Node )
Node *convert(vector<int> &nums,int start, int end){
      
      if(start>end)
      return NULL;
      
  
   
   int mid = start +(end - start)/2;
   Node*head = new Node(nums[mid]);
   head->left = convert(nums,start, mid-1);
   head->right = convert(nums, mid+1 , end);
  }
  
    Node* sortedArrayToBST(vector<int>& nums) {
        // Code here
        int n = nums.size();
        return convert(nums,0,n-1);
    }
