//C++ new
//try again 
(M-1)
//Corrected code pass all the test case 
bool isCousins(Node *root, int a, int b)
{
    queue<Node*> q;
    q.push(root);
    int l1 = -1, l2 = -1;
    Node* parent_a = nullptr;
    Node* parent_b = nullptr;
    int level = 0;

    while (!q.empty())
    {
        int n = q.size();

        while (n--)
        {
            Node* temp = q.front();
            q.pop();
            if (temp->left)
            {
                q.push(temp->left);
                if (temp->left->data == a)
                {
                    l1 = level + 1;
                    parent_a = temp;
                }
                if (temp->left->data == b)
                {
                    l2 = level + 1;
                    parent_b = temp;
                }
            }
            if (temp->right)
            {
                q.push(temp->right);
                if (temp->right->data == a)
                {
                    l1 = level + 1;
                    parent_a = temp;
                }
                if (temp->right->data == b)
                {
                    l2 = level + 1;
                    parent_b = temp;
                }
            }
        }

        level++;
        if (l1 != -1 && l2 != -1) // both nodes found
            break;
    }

    // check if both nodes are at the same level and have different parents
    return (l1 == l2) && (parent_a != parent_b);
}

(M-2)
//Not Corrected not pass all the test case
bool parent(Node *root,int a,int b)
{
    if(!root)
    return 0;
    
    if(root->left&&root->right)
    {
        if(root->left->data==a && root->right->data==b)
        return 1;
        if(root->left->data==b && root->right->data==a)
        return 1;
        
    }
    //left part 
    //rigght parent 
    
    return parent(root->left,a,b)||parent(root->right,a,b);
}
bool isCousins(Node *root, int a, int b)
{
   //add code here.
   queue<Node*>q;
   q.push(root);
   int l1 = -1, l2 = -1;
   
   int level = 0;
   
   while(!q.empty())
   {
    
     int n =q.size();
     
     while(n--)
     {
         Node*temp = q.front();
         q.pop();
         if(temp->data==a)
         l1= level;
         if(temp->data==b)
         l2 = level;
         
         if(temp->left)
         q.push(temp->left);
         
         if(temp->right)
         q.push(temp->right);
     }
     
     level++;
     if(l1!=l2) //Same level par nahi hai 
     return 0;
     
     if(l1!= -1 && l2 != -1)// dono ke liye level mil gaye honge
     break;
      
   }
   
   
   //parent 
   return !parent(root, a, b); //a and b ke parent same hai 
   

  
}
