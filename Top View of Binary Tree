//C++
M-1(by using level order traversal/try again)
 void find(Node *root, int pos,int &l, int &r)
    {
        if(!root)
        return;
        
        l =min(pos,l);
        r =max(pos,r);
        
        find(root->left,pos-1,l,r);
        find(root->right,pos+1,l,r);
        
    }
    
    vector<int> topView(Node *root)
    {
        //Your code here
        int l = 0, r = 0;
        find(root,0,l,r);
        
        vector<int>ans(r-l+1);
        vector<bool>filled(r+1,0);
        
        queue<Node*>q;
        queue<int>index;
        q.push(root);
        index.push(-1*l);
        
        while(!q.empty())
        {
            Node *temp = q.front();
            q.pop();
            int pos = index.front();
            index.pop();
            
            if(!filled[pos])
            {
                filled[pos]=1;
                ans[pos] = temp->data;
            }
            
            //left
            if(temp->left)
            {
                q.push(temp->left);
                index.push(pos-1);
            }
            
             if(temp->right)
            {
                q.push(temp->right);
                index.push(pos+1);
            }
        }
        
        return ans;
    }

M-2
//by using recursion
     void find(Node *root, int pos,int &l, int &r)
    {
        if(!root)
        return;
        
        l =min(pos,l);
        r =max(pos,r);
        
        find(root->left,pos-1,l,r);
        find(root->right,pos+1,l,r);
        
    }
    
    void Tview(Node *root, int pos, vector<int>&ans, vector<int>&level, int l){
        if(!root)
        return;
        //
        if(level[pos]>l)
        {
            ans[pos]= root->data;
            level[pos]=l;
            
        }
        
        Tview(root->left,pos-1,ans,level,l+1);
        Tview(root->right,pos+1,ans,level,l+1);
    }
    vector<int> topView(Node *root)
    {
        //Your code here
        int l = 0, r= 0;
        find(root,0,l,r);
        
        vector<int>ans(r-l+1);
        vector<int>level(r-l+1,INT_MAX);
        Tview(root,-1*l,ans,level,0);
        return ans;
        
        
    }
