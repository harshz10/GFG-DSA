//C++
class Solution{
    int minEle;
    stack<int>st1; //Orignal element 
    stack<int>st2; //Minimum value
    public:
    
       /*returns min element from stack*/
       int getMin(){
           
           //Write your code here
           if(st2.empty())
           return -1;
           
           return st2.top();
       }
       
       /*returns poped element from stack*/
       int pop(){
           
           //Write your code here
           if(st1.empty())
           return -1;
           
           int element = st1.top();
           st1.pop();
           st2.pop();
           
           return element;
       }
       
       /*push element x into the stack*/
       void push(int x){
           
           //Write your code here
           if(st1.empty())
           {
               st1.push(x);
               st2.push(x);
           }
           
           else 
           {
               st1.push(x);
              st2.push(min(st2.top(),x));
           }
       }
};

(M-2) [optimize approach by using % and condition of single stack]
class Solution{
    int minEle;
    stack<int> st1;
    stack<int> st2;
    public:
    
       /*returns min element from stack*/
       int getMin(){
           
           //Write your code here
           if(st1.empty())
           return -1;
           else 
           return st1.top()%101;
       }
       
       /*returns poped element from stack*/
       int pop(){
           
           //Write your code here
           if(st1.empty())
           return -1;
           
           int element = st1.top()/101;
           st1.pop();
           return element;
       }
       
       /*push element x into the stack*/
       void push(int x){
           
           //Write your code here
           if(st1.empty())
           {
               st1.push(x*101+x);
           }
           
           else
           {
               st1.push(x*101+min(st1.top()%101,x));
           }
       }
};
