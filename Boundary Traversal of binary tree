//C++
//***

void LeftSub(Node *root, vector<int>&ans)
    {
        //base case leaf node
        if(!root || (!root->left&&!root->right))
        return;
        
        ans.push_back(root->data);
        if(root->left)
        LeftSub(root->left,ans);
        else 
        LeftSub(root->right,ans);
    }
    
    
    void Leaf(Node *root, vector<int>&ans)
    {
        if(!root)
        return;
        
        ///leaf Node
        if(!root->left&&!root->right)
        {
            ans.push_back(root->data);
            return;
        }
        
        //Leaf part
        Leaf(root->left,ans);
        //Right
        Leaf(root->right,ans);
    }
    
    
    void RightSub(Node *root, vector<int>&ans)
    {
        //base
        if(!root || (!root->left &&!root->right ))
        return;
        //Right part
        if(root->right)
        RightSub(root->right,ans);
        else 
        RightSub(root->left,ans);
        
        ans.push_back(root->data);
    }
    vector <int> boundary(Node *root)
    {
        vector<int>ans;
        //Root element
        ans.push_back(root->data);
        //left boundary element ko daal do except leaf 
        LeftSub(root->left,ans);
        //left ko insert kar do
        if(root->left || root->right)
        Leaf(root,ans);
        //right Boundary  usko reverse mein daal do except leaf node
        RightSub(root->right,ans);
        
        return ans;
    }
